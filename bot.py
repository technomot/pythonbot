import os
import json
import re
import google.generativeai as genai
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_KEY = os.getenv("GEMINI_API_KEY")

genai.configure(api_key=GEMINI_KEY)
model = genai.GenerativeModel("gemini-2.5-flash")

# === –î–∞–Ω—ñ —á–∞—Ç—É ===
chat_data = {}  # chat_id -> {history, category, test}

# === –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é ===
main_keyboard = [
    ["üéì –ù–∞–≤—á–∞–Ω–Ω—è / Learning", "üåç –ü–µ—Ä–µ–∫–ª–∞–¥ / Translation"],
    ["üíª –ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è / Programming", "üé≠ –†–æ–∑–≤–∞–≥–∏ / Fun"],
    ["üìò –¢–µ—Å—Ç –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ / Ukrainian Test"],
    ["üß† –ù–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥ / New Chat", "‚ùå –°—Ç–æ–ø / Stop"]
]
reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)

# === –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤ ===
def clean_text(text: str) -> str:
    """
    –£–±–∏—Ä–∞—î *, _, ~, `, #, –ª–∏—à–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏, –∑–∞–ª–∏—à–∞—î –µ–º–æ–¥–∑—ñ.
    """
    text = re.sub(r'[*_~`#]', '', text)
    return text.strip()

# === –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ–≤–≥–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö ===
async def send_long_message(update, text):
    MAX_LEN = 4000
    text = clean_text(text)
    for i in range(0, len(text), MAX_LEN):
        await update.message.reply_text(text[i:i+MAX_LEN])

# === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—É –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ ===
def generate_ukrainian_test():
    prompt = (
        "–°—Ç–≤–æ—Ä–∏ —Ç–µ—Å—Ç –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ –∑ 3 –∑–∞–ø–∏—Ç–∞–Ω—å. "
        "–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–∞–π 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –ø–æ–∑–Ω–∞—á –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. "
        "–í–∏–¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON: [{\"question\":\"...\", \"options\":[\"...\",\"...\",\"...\",\"...\"], \"answer\":\"...\"}]"
    )
    try:
        response = model.generate_content(prompt)
        text = response.text.strip()
        start = text.find("[")
        end = text.rfind("]") + 1
        json_text = text[start:end]
        test = json.loads(json_text)
        for q in test:
            if "question" not in q or "options" not in q or "answer" not in q:
                raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
        return test
    except Exception as e:
        print("Fallback —Ç–µ—Å—Ç:", e)
        return [
            {"question": "–Ø–∫ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ '–º—ñ—Å—è—Ü—å'?", "options": ["Sun", "Moon", "Star", "Sky"], "answer": "Moon"},
            {"question": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–æ '—Å–æ–Ω—Ü–µ'", "options": ["Sun", "Moon", "Star", "Sky"], "answer": "Sun"},
            {"question": "–ü–µ—Ä–µ–∫–ª–∞–¥–∏ '–≤–æ–¥–∞'", "options": ["Water", "Fire", "Earth", "Air"], "answer": "Water"}
        ]

# === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Gemini ===
def generate_response(chat_id: int, user_text: str) -> str:
    data = chat_data.get(chat_id, {"history": [], "category": "–û–±—â–µ–Ω–∏–µ"})
    history = data["history"]
    category = data["category"]

    system_prompt = {
        "üéì –ù–∞–≤—á–∞–Ω–Ω—è": "–¢–∏ ‚Äî –≤–∏–∫–ª–∞–¥–∞—á —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ –∏–ª–∏ –Ω–∞ —è–∑—ã–∫–µ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–µ—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ—è—Å–Ω—é–π —á—ñ—Ç–∫–æ —Ç–∞ –ø—Ä–æ—Å—Ç–æ.",
        "üåç –ü–µ—Ä–µ–∫–ª–∞–¥": "–¢–∏ ‚Äî –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á. –ü–µ—Ä–µ–∫–ª–∞–¥–∞–π —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∏–ª–∏ –Ω–∞ —è–∑—ã–∫–µ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–µ—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ.",
        "üíª –ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è": "–¢–∏ ‚Äî –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç. –ü–æ—è—Å–Ω—é–π –∫–æ–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∏–ª–∏ –Ω–∞ —è–∑—ã–∫–µ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–µ—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
        "üé≠ –†–æ–∑–≤–∞–≥–∏": "–¢–∏ ‚Äî –≤–µ—Å–µ–ª–∏–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫. –®—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∏–ª–∏ –Ω–∞ —è–∑—ã–∫–µ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–µ—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
        "–û–±—â–µ–Ω–∏–µ": "–¢–∏ ‚Äî –¥—Ä—É–∂–Ω—ñ–π AI."
    }.get(category, "–¢–∏ ‚Äî –¥—Ä—É–∂–Ω—ñ–π AI.")

    context = "\n".join(history[-5:])
    prompt = f"{system_prompt}\n\n–Ü—Å—Ç–æ—Ä—ñ—è –¥—ñ–∞–ª–æ–≥—É:\n{context}\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_text}\n–ë–æ—Ç:"

    try:
        response = model.generate_content(prompt)
        reply = clean_text(response.text.strip() if hasattr(response, "text") else "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
    except Exception as e:
        reply = f"–ü–æ–º–∏–ª–∫–∞ Gemini: {e}"

    history.append(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_text}")
    history.append(f"–ë–æ—Ç: {reply}")
    chat_data[chat_id] = {"history": history, "category": category}
    return reply

# === –û–±—Ä–æ–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π ===
async def handle_test_answer(update: Update, chat_id: int, answer: str):
    test_data = chat_data[chat_id]["test"]
    test = test_data["questions"]
    index = test_data["index"]

    user_answer = answer.strip().lower()
    correct_answer = test[index]["answer"].strip().lower()

    if user_answer == correct_answer:
        test_data["score"] += 1

    test_data["index"] += 1

    if test_data["index"] < len(test):
        q = test[test_data["index"]]
        options = [[o] for o in q["options"]]
        markup = ReplyKeyboardMarkup(options, resize_keyboard=True)
        await update.message.reply_text(clean_text(q["question"]), reply_markup=markup)
    else:
        score = test_data["score"]
        total = len(test)
        if score == total:
            level = "–ø—Ä–æ—Å—É–Ω—É—Ç–∏–π"
        elif score >= total // 2:
            level = "—Å–µ—Ä–µ–¥–Ω—ñ–π"
        else:
            level = "–ø–æ—á–∞—Ç–∫–æ–≤–∏–π"

        try:
            program = clean_text(model.generate_content(
                f"–ü—ñ–¥–±–µ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–≤—á–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ {level} –∑–Ω–∞–Ω–Ω—è–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏."
            ).text.strip())
        except Exception as e:
            program = f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É: {e}"

        result_text = f"üìã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}\n–†—ñ–≤–µ–Ω—å: {level}\n\nüìö –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞:\n{program}"
        await send_long_message(update, result_text)
        await update.message.reply_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=reply_markup)
        del chat_data[chat_id]["test"]

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    if chat_data.get(chat_id, {}).get("test"):
        await handle_test_answer(update, chat_id, text)
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –∫–Ω–æ–ø–∫–∏
    if text.startswith("üéì –ù–∞–≤—á–∞–Ω–Ω—è"):
        category = "üéì –ù–∞–≤—á–∞–Ω–Ω—è"
    elif text.startswith("üåç –ü–µ—Ä–µ–∫–ª–∞–¥"):
        category = "üåç –ü–µ—Ä–µ–∫–ª–∞–¥"
    elif text.startswith("üíª –ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"):
        category = "üíª –ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"
    elif text.startswith("üé≠ –†–æ–∑–≤–∞–≥–∏"):
        category = "üé≠ –†–æ–∑–≤–∞–≥–∏"
    else:
        category = None

    if category:
        chat_data.setdefault(chat_id, {"history": []})
        chat_data[chat_id]["category"] = category
        await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {category}")
        return

    elif text.startswith("üìò –¢–µ—Å—Ç –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏"):
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä—É—é —Ç–µ—Å—Ç, –∑–∞—á–µ–∫–∞–π...")
        test = generate_ukrainian_test()
        chat_data[chat_id]["test"] = {"questions": test, "index": 0, "score": 0}
        q = test[0]
        options = [[o] for o in q["options"]]
        markup = ReplyKeyboardMarkup(options, resize_keyboard=True)
        await update.message.reply_text(clean_text(q["question"]), reply_markup=markup)
        return

    elif text.startswith("üß† –ù–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥"):
        chat_data[chat_id] = {"history": [], "category": "–û–±—â–µ–Ω–∏–µ"}
        await update.message.reply_text("üßπ –Ü—Å—Ç–æ—Ä—ñ—è –æ—á–∏—â–µ–Ω–∞. –ü–æ—á–Ω–µ–º–æ –∑–∞–Ω–æ–≤–æ.", reply_markup=reply_markup)
        return

    elif text.startswith("‚ùå –°—Ç–æ–ø"):
        await update.message.reply_text("üö´ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    reply = generate_response(chat_id, text)
    await update.message.reply_text(reply, reply_markup=reply_markup)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.effective_user.first_name
    chat_data[update.effective_chat.id] = {"history": [], "category": "–û–±—â–µ–Ω–∏–µ"}
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {name}! ü§ñ –Ø UAHelper.\n–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ —Å–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ üá∫üá¶:",
        reply_markup=reply_markup
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
